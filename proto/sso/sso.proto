syntax = "proto3";

package auth;

option go_package = "tuzov.sso.v1;ssov1";

// Auth is service for managing authentification.
service Auth {
  // Register registers a new user.
  rpc Register (RegisterRequest) returns (RegisterResponse);
  // Login logs in a user and returns an auth token.
  rpc Login (LoginRequest) returns (LoginResponse);
  // Logout logs out a user.
  rpc Logout (LogoutRequest) returns (LogoutResponse);
}

// Permissions is service for managing permissions and roles.
service Permissions {
  // CheckPermission checks permission for a user.
  rpc CheckPermission (CheckPermissionRequest) returns (CheckPermissionResponse);
  // AssignPermission assignes permission for a user.
  //
  // WARNING! AssignPermission is not protected from unauthorized third-party use. 
  // A simplified implementation within the framework of the educational project is given.
  rpc AssignPermission (AssignPermissionRequest) returns (AssignPermissionResponse);
  // RemovePermission removes permission for a user.
  //
  // WARNING! RemovePermission is not protected from unauthorized third-party use. 
  // A simplified implementation within the framework of the educational project is given.
  rpc RemovePermission (RemovePermissionRequest) returns (RemovePermissionResponse);
}

message RegisterRequest {
  string email = 1; // Email of the user to register.
  string password = 2; // Password of the user to register.
}

message RegisterResponse {
  int64 user_id = 1; // User ID of the registered user.
}

message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
  int32 app_id = 3; // ID of the app to login to.
}

message LoginResponse {
  string token = 1; // Auth token of the logged in user.
}

message LogoutRequest {
  string token = 1; // Auth token of the user to logout.
}

message LogoutResponse {
  bool success = 1; // Indicates whether the logout was successful.
}

message CheckPermissionRequest {
  Permission permission = 1; // Permission that should be checked.
}

message CheckPermissionResponse {
  bool is_valid = 1;  // Indicates whether permission is valid.
}

message AssignPermissionRequest {
  Permission permission = 1; // Permission that should be assigned.
}

message AssignPermissionResponse {
  bool success = 1; // Indicates whether assinging permission was successful.
}

message RemovePermissionRequest {
  Permission permission = 1; // Permission that should be removed.
}

message RemovePermissionResponse {
  bool success = 1; // Indicates whether removing permission was successful.
}

message Permission {
  int64 user_id = 1;
  int32 app_id = 2; 
  int32 access_right = 3;
}